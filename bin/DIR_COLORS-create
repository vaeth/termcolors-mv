#!/usr/bin/env perl
# (C) Martin VE<auml>th E<lt>martin@mvath.deE<gt>
# SPDX-License-Identifier: MIT
use integer;
use strict;
use warnings;

# Essentially, everything below is written to the 4 @output files (see below).
# There are some XML-type tags honoured:
# <poor> ... </poor>:   This block is ignored unless an argument is passed
# <term> ... </term>:   These entries are preceeded by TERM (colorizable)
# <block> ... </block>: Everything inside is assigned the "current" color
# <lower> ... </lower>: Outputs the whole content in lower- and uppercase
# <lowerblock> ... </lowerblock>: Short for <block><lower> ... </lower></block>
# Then there is one tag for colors:
# A color tag has the format <(1)|(2)|(3)|(4)> (each numer for one @output).
# Each of the entries (1)-(4) is either a text (which is output) or it has
# the form x... or y... for 256 color/background.
# Each of the entries (2), (3), (4) can be empty or omitted: In that case the
# corresponding entry automatically gets the meaning of the previous entry.
# It can also be \1, \2, or \3 (meaning the entry of (1), (2), or (3)).
my $skeleton = << 'END_OF_SKELETON';
# Configuration file for dircolors, a utility to help you set the
# LS_COLORS environment variable used by GNU ls with the --color option.

# Copyright (C) 1996-2016 Free Software Foundation, Inc.
# Copying and distribution of this file, with or without modification,
# are permitted provided the copyright notice and this notice are preserved.

# The keywords COLOR, OPTIONS, and EIGHTBIT (honored by the
# slackware version of dircolors) are recognized but ignored.

# You can copy this file to .dir_colors in your $HOME directory to override
# the system defaults.

# Below are TERM entries, which can be a glob patterns, to match
# against the TERM environment variable to determine if it is colorizable.
# Note that older versions of coreutils do not support glob patterns
<term>
Eterm
ansi
*color*
con[0-9]*x[0-9]*
cons25
console
cygwin
dtterm
gnome
hurd
jfbterm
konsole
kterm
linux
linux-c
mlterm
pcansi
putty
rxvt*
screen*
st
terminator
tmux*
vt100
xterm*
</term>
<poor>
# For the case that glob patterns are not supported, we add the common cases...
<term>
color-xterm
color_xterm
con132x25
con132x30
con132x43
con132x60
con80x25
con80x28
con80x30
con80x43
con80x50
con80x60
eterm-color
gnome-256color
mach-color
mach-gnu-color
putty-256color
rxvt
rxvt-256color
rxvt-cygwin
rxvt-cygwin-native
rxvt-unicode
rxvt-unicode-256color
rxvt-unicode256
screen
screen-256color
screen-256color-bce
screen-bce
screen-bce.xterm-new
screen-bce.xterm-xfree86
screen-w
screen.Eterm
screen.linux
screen.rxvt
screen.xterm-new
screen.xterm-xfree86
st-256color
tmux
tmux-256color
tmux-256color-bce
tmux-bce
tmux-bce.xterm-new
tmux-bce.xterm-xfree86
tmux-w
tmux.Eterm
tmux.linux
tmux.rxvt
tmux.xterm-new
tmux.xterm-xfree86
xterm
xterm-16color
xterm-256color
xterm-88color
xterm-color
xterm-debian
xterm-new
xterm-xfree86
</term>
</poor>

## Documentation
#
# standard colors
#
# Below are the color init strings for the basic file types. A color init
# string consists of one or more of the following numeric codes:
# Attribute codes:
# 00=none 01=bold 04=underscore 05=blink 07=reverse 08=concealed
# Text color codes:
# 30=black 31=red 32=green 33=yellow 34=blue 35=magenta 36=cyan 37=white
# Background color codes:
# 40=black 41=red 42=green 43=yellow 44=blue 45=magenta 46=cyan 47=white
#
#
# 256 color support
# see here: http://www.mail-archive.com/bug-coreutils@gnu.org/msg11030.html)
#
# Text 256 color coding:
# 38;5;COLOR_NUMBER
# Background 256 color coding:
# 48;5;COLOR_NUMBER
#
# For testing: printf '\033[%sm foo \033[0m\n' '38;5;251'
# Try the 256color script

## Special files

<block>
NORMAL		<#00||x252|00> # other information than filename
FILE		<#00||x248|01;33> # regular file: use no color at all
RESET		<#0> # reset to "normal" color
DIR		<01;33|33|01;33|01;x214> # directory
LINK		<01;35||x170|>	# symbolic link.  (If you set this to 'target' instead of a
				# numerical value, the color is as for the file pointed to.)
MULTIHARDLINK	<01;35||01;x213|\2> # regular file with more than one link
FIFO		<01;31;44|35;47|\1|35;y21> # pipe
SOCK # socket
DOOR # door
BLK		<01;44|30;47|\1|x247;y21> # block device driver
CHR # character device driver
ORPHAN		<01;05;37;41|01;41|30;y212> # orphaned symlinks
MISSING		<01;05;37;41|01;41|35;y212> # ... and the files they point to
SETUID		<37;41||y196|37;41> # file that is setuid (u+s)
SETGID		<01;45|30;44|y90|30;44> # file that is setgid (g+s)
CAPABILITY	<30;46||01;31;46|\2> # file with capability
STICKY_OTHER_WRITABLE	<30;43> # dir that is sticky and other-writable (+t,o+w)
OTHER_WRITABLE	<01;31;43|||01;x88;43> # dir that is other-writable (o+w) and not sticky
STICKY		<04;01;33|04;33|01;x221> # dir with the sticky bit set (+t) and not other-writable
EXEC		<01;37> # This is for files with execute permission
</block>


# List any file extensions like '.gz' or '.tar' that you would like ls
# to colorize below. Put the extension, a space, and the color init string.
# (and any comments you want to add after a '#')

# Temp-Files, Swap-Files, Backup-Files:
<01;31||x196|\2>
<block>
*~
*$
*#
*-

<lower>
.tmp
.swp
.bak
.dup
.ori
.o
.obj
.zwc
.tpu
.log
.ilg
.dlg
.blg
.prv
.old
.orig
</lower>

.rpmsave
.rpmnew
.saxsave
</block>

# Intermediate Files generated by TeX
<35||x32|\2>
<lowerblock>
.aux
.toc
.idx
.glo
.thm
</lowerblock>

# Intermediate Files generated by TeX-related tools
<#35||x28>
<lowerblock>
.ind
.gls
.bbl
</lowerblock>

# Texts:
<36||x42|\2>
<block>
*authors
*Authors
*AUTHORS
*copying
*Copying
*COPYING
*changes
*Changes
*CHANGES
*changelog
*Changelog
*ChangeLog
*CHANGELOG
*info
*Info
*INFO
*install
*Install
*INSTALL
*readme
*Readme
*ReadMe
*README
*todo
*ToDo
*TODO
*faq
*FAQ
*release
*Release
*RELEASE
*problems
*PROBLEMS

<lower>
.txt
.md
.me
.1st
.now
.nfo
.diz
.cfg
.conf
.diff
.patch
.ini
</lower>
</block>

# TeX texts
<32|||x34>
<lowerblock=>
.tex
.bib
</lowerblock>

# Sourcefiles:
<01;36||x87|\2>
<lowerblock>
.java
.sh
.csh
.bash
.pl
.py
.pyt
.c
.cc
.cpp
.h
.hpp
.s
.src
.asm
.pas
.for
.y
.el
.bst
.ist
.mf
.m4
.rb
</lowerblock>

# TeX-Sourcefiles
<01;32||x46|32>
<lowerblock>
.sty
.cls
.dtx
.ltx
.ins
.clo
.fdd
.fd
</lowerblock>

# Other OS's executables:
<01;37>
<lowerblock>
.exe
.com
.btm
.bat
</lowerblock>

# Archives:
<01;34||01;x33|01;x33>
<lowerblock>
.deb
.rpm
.spm
.ppm
.arj
.a01
.a02
.a03
.a04
.a05
.a06
.a07
.a08
.a09
.j
.j01
.j02
.j03
.j04
.j05
.j06
.j07
.j08
.j09
.arz
.taz
.tgz
.gz
.tbr
.br
.bro
.brotli
.zst
.zstd
.tzs
.tzst
.tzstd
.tbz
.tb3
.bz
.bz2
.bz3
.tbz2
.tbz3
.lzma
.lzm
.lzo
.lz
.tlz
.lz4
.tz4
.tl4
.tlz4
.xz
.txz
.lrz
.tlr
.tlrz
.7z
.t7z
.z
.dz
.tz
.tzo
.arc
.zip
.lzh
.lha
.zoo
.ice
.pak
.tar
.dar
.uc2
.rar
.q
.lim
.acb
.ace
.x
.yc
.dir
.gfb
.hpk
.spl
.cpt
.sit
.pit
.dwc
.hyp
.hap
.ha
.jar
.war
.ear
.sar
.alz
.crate
.cra
.xpi
.apk
.rz
.cab
.cpi
.cpio
.sfs
.sqf
.sqfs
</lowerblock>

# sound formats
<33||x130>
<block>
<lower>
.au
.mp3
.m4a
.m4b
.ogg
.flac
.aac
.mpc
.mid
.midi
.mka
.cmf
.cms
.xmi
.voc
.wav
.mod
.stm
.ra
.rol
.snd
.wrk
.mff
.smp
.alg
.al2
.nst
.med
.wow
.669
.s3m
.oct
.okt
.far
.mtm
</lower>

# http://wiki.xiph.org/index.php/MIME_Types_and_File_Extensions
<lower>
.axa
.oga
.opus
.spx
.xspf
</lower>
</block>

# image formats
<33||x174|\2>
<block>
<lower>
.gif
.pcx
.bmp
.png
.mng
.xcf
.xwd
.cpi
.tga
.tif
.tiff
.img
.pi1
.pi2
.pi3
.pic
.pnm
.pbm
.pgm
.ppm
.pcm
.pcc
.jpg
.jpe
.jpeg
.mjpg
.mjpeg
.iff
.art
.wpg
.rle
.xbm
.xpm
.svg
.svgz
.yuv
.cgm
.emf
</lower>

# http://wiki.xiph.org/index.php/MIME_Types_and_File_Extensions
<lower>
.axv
.anx
.ogv
.ogx
</lower>
</block>

# binary image/text/ebook formats
<31||x143|\2>
<lowerblock>
.dvi
.ps
.eps
.fb2
.pdf
.doc
.docx
.rtf
.odt
.fig
.cbr
.cbt
.cbz
.djv
.djvu
.epub
.prc
.kfx
.lit
.mobi
.chm
.azw
.azw3
</lowerblock>

# movie formats
<33||x208>
<lowerblock>
.mpg
.mpeg
.m2v # MPEG-2 Video only
.avi
.flv
.mkv # Matroska (http://matroska.org/)
.ogm # Ogg Media File
.mp4 # "Offical" container for MPEG-4
.m4v # MPEG-4 Video only
.mp4v # MPEG-4 Video only
.mov # Quicktime (http://developer.apple.com/qa/qtw/qtw99.html)
.qt # Quicktime (http://developer.apple.com/qa/qtw/qtw99.html)
.nuv # Quicktime (http://developer.apple.com/qa/qtw/qtw99.html)
.wmv # Windows Media Video
.asf # Advanced Systems Format (contains Windows Media Video)
.ts # Transport Stream
.rm # Real Media
.rmvb # Real Media Variable Bitrate
.flc # AutoDesk Animator
.fli # AutoDesk Animator
.gl
.dl
.swf # Flash-player. See also swftools
.3gp
.vob
.webm
.web
</lowerblock>
END_OF_SKELETON

# Global variables

my @output = (
	'DIR_COLORS',
	'DIR_COLORS-solarized',
	'DIR_COLORS-256',
	'DIR_COLORS-solarized-256'
);
$skeleton =~ s{\r}{}go;
my ($block, $lower, $term, $poor);
my $lowersep;
my $ignoring;
my $color;
my @block;
my @lower;
my $mode = 0;
my $include_poor = '';
my $linecount;

sub process_line {
	my ($line) = @_;
	chomp($line);
	$line =~ s{\s*$}{}g;
	if ($line =~ m{^\<(.*)\>$}) {
		my $item = $1;
		if ($item =~ m{^\/poor$}i) {
			&close_poor();
			return
		} elsif ($item =~ m{^poor$}i) {
			&open_poor($item);
			return
		}
		return if ($ignoring);
		if ($item =~ m{^\/term$}i) {
			&close_term();
			return
		}
		my $found = '';
		if ($item =~ m{^\/}) {
			if ($item =~ m{lower}i) {
				&close_lower();
				$found = 1
			}
			if ($item =~ m{block}i) {
				&close_block();
				return
			}
			return if ($found);
			&fatal_line("tag $item not understood")
		}
		if ($item =~ m{term}i) {
			&open_term($item);
			return
		}
		if ($item =~ m{block}i) {
			&open_block($item);
			$found = 1
		}
		if ($item =~ m{lower}i) {
			&open_lower($item);
			return
		}
		&set_color($item) unless ($found);
		return
	}
	return if ($ignoring);
	if (($line eq '') || (substr($line, 0, 1) eq '#')) {
		if ($block ne '') {
			push(@block, $line)
		} else {
			print($line, "\n")
		}
		if (($lower ne '') && ($line eq '')) {
			push(@lower, $line)
		}
		return
	}
	if ($term) {
		print('TERM ', $line, "\n");
		return
	}
	unless ($line =~ m{^(\S*)\s*(\<([^\>]*)\>)?\s*(\#.*)?$}) {
		&fatal_line("cannot parse line: $line")
	}
	my ($item, $comment) = ($1, (defined($4) ? $4 : ''));
	&set_color($3) if (defined($2) && ($2 ne ''));
	my $col = (($item eq '') ? '' : $color);
	$item = '#' . $item if ($col =~ s{\#}{}g);
	push(@lower, [uc($item), $col, '']) if ($lower);
	if ($block) {
		push(@block, [$item, $col, $comment])
	} else {
		&fatal_line("item without a block: $line");
	}
}

sub set_color {
	my ($c) = @_;
	&fatal_line("unrecognized color \<${c}\>") if ($c =~ m{[^xyXY\d;\\\|\#]});
	$c =~ s{[xX]}{38;5;}g;
	$c =~ s{[yY]}{48;5;}g;
	my @colors = split(/\|/, $c);
	&fatal_line('empty color not allowed') unless (@colors);
	my @got = ();
	for (my $cur = $mode; ; ) {
		&fatal_line("Self-reference in \<${c}\>") if ($got[$cur]);
		if (scalar(@colors) - 1 < $cur) {
			$cur = scalar(@colors) - 1;
			next
		}
		my $col = $colors[$cur];
		while($col eq '') {
			&fatal_line("empty first color in \<${c}\>") unless ($cur);
			$col = $colors[--$cur]
		}
		if ($col =~ m{^\\(\d+)$}) {
			$got[$cur] = 1;
			$cur = $1 - 1;
			next
		}
		$color = $col;
		last
	}
}

sub open_term {
	&fatal_twice if ($term);
	$term = 1
}

sub open_block {
	&fatal_twice if ($block);
	$block = 1;
	@block = ()
}

sub open_lower {
	&fatal_twice if ($lower);
	my ($item) = @_;
	$lower = 1;
	$lowersep = !($item =~ m{\=});
	@lower = ()
}

sub open_poor {
	&fatal_twice if ($poor);
	$poor = 1;
	$ignoring = 1 unless ($include_poor)
}

sub close_term {
	&fatal_not unless ($term);
	$term = ''
}

sub close_block {
	&fatal_not unless ($block);
	$block = '';
	my ($len1, $len2);
	$len1 = $len2 = 0;
	for my $words (@block) {
		next unless (ref($words) eq 'ARRAY');
		&maximize(\$len1, length($words->[0]));
		&maximize(\$len2, length($words->[1]))
	}
	$len1 = (($len1 + 9) / 8) * 8 + 7;
	$len2 = (($len2 + 9) / 8) * 8 + 7;
	for my $words (@block) {
		if (ref($words) ne 'ARRAY') {
			print($words, "\n");
			next
		}
		my ($out, $col, $com) = @$words;
		if (($col ne '') || ($com ne '')) {
			$out .= ("\t" x (($len1 - length($out)) / 8)) . $col;
			$out .= ("\t" x (($len2 - length($col)) / 8)) . $com if ($com ne '');
		}
		print($out, "\n")
	}
}

sub close_lower {
	&fatal_not unless ($lower);
	$lower = '';
	push(@block, '') if ($lowersep);
	push(@block, @lower)
}

sub close_poor {
	&fatal_not unless ($poor);
	$poor = $ignoring = '';
}

sub maximize {
	my ($len, $test) = @_;
	$$len = $test if ($$len < $test)
}

sub fatal_twice {
	&fatal_line('<' . @_ . '> opened twice');
}

sub fatal_note {
	&fatal_line('<' . @_ . '> without opening');
}

sub fatal_line {
	print(STDERR "fatal in line $linecount: ", @_, "\n");
	exit(1)
}

sub fatal {
	print(STDERR "fatal: ", @_, "\n");
	exit(1)
}

print("Generating files:\n", join("\n", @output), "\n\n");
if (@ARGV) {
	$include_poor = 1;
	print("Including obsolete data needed for <coreutils-8.25.\n",
	"Pass no argument if you do not want that.\n")
} else {
	print("Exluding obsolete data needed only for <coreutils-8.25.\n",
	"Pass an argument if you want to include these.\n")
}
for my $file (@output) {
	open(my $fh, '>', $file) or &fatal("cannot open $file for writing");
	select($fh);
	$block = $lower = $term = $poor = $ignoring = $color = '';
	$linecount = 4;
	for my $line (split(/\n/, $skeleton)) {
		++$linecount;
		&process_line($line)
	}
	&fatal('<block> not closed') if ($block);
	&fatal('<lower> not closed') if ($lower);
	&fatal('<term> not closed') if ($term);
	&fatal('<poor> not closed') if ($poor);
	close($fh);
	++$mode
}
1
